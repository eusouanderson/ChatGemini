import type { Message } from '@/app/entities/message.entity'; // <-- ADICIONAR IMPORT
import { callGeminiAPI } from '@/app/service/gemini.service';
import { ProjectReaderService } from '@/app/service/project-reader.service';
import { chatRepository } from '@/infrastructure/redis/chat.repository'; // <-- ADICIONAR IMPORT

// ---
// 1. ALTERA√á√ÉO: Adicionar o hist√≥rico da conversa ao prompt de an√°lise
// ---

// Fun√ß√£o auxiliar para evitar duplica√ß√£o de c√≥digo na formata√ß√£o do hist√≥rico
function formatHistoryForPrompt(history: Message[]): string {
  if (history.length === 0) {
    return 'Nenhum hist√≥rico de conversa anterior.';
  }
  return history
    .map((msg) => `${msg.role === 'assistant' ? 'Assistant' : 'User'}: ${msg.content}`)
    .join('\n');
}

// ALTERADO: A fun√ß√£o agora recebe o hist√≥rico como par√¢metro
function createChunkAnalysisPrompt(
  chunk: string,
  chunkIndex: number,
  totalChunks: number,
  history: string // NOVO: par√¢metro para o hist√≥rico formatado
): string {
  return `
# ROLE
Voc√™ √© um Engenheiro de Software S√™nior.

# CONTEXT
Voc√™ est√° analisando um grande projeto de software em partes. Voc√™ recebeu o LOTE ${chunkIndex} de ${totalChunks}.
Sua an√°lise preliminar ser√° usada posteriormente para gerar um relat√≥rio consolidado.
Abaixo est√° o hist√≥rico da conversa atual para lhe dar contexto sobre o que o usu√°rio pode ter pedido anteriormente.

# HIST√ìRICO DA CONVERSA
${history}

# TASK
Analise o lote de c√≥digo abaixo. Foque em identificar:
- Padr√µes de arquitetura e design.
- Pontos cr√≠ticos de qualidade de c√≥digo (complexidade, duplica√ß√£o, etc.).
- Poss√≠veis falhas de seguran√ßa.
- Aus√™ncia ou presen√ßa de testes.
- Qualidade da documenta√ß√£o (coment√°rios, READMEs).

Seja conciso e direto. Liste suas observa√ß√µes em formato de t√≥picos (markdown).

# CODE CHUNK
${chunk}
`;
}

// ALTERADO: Adicionando hist√≥rico tamb√©m ao relat√≥rio final para consist√™ncia
function createFinalReportPrompt(allSummaries: string, history: string): string {
  return `
# ROLE
Voc√™ √© o CodeReviewer AI, um Arquiteto de Solu√ß√µes S√™nior com 15 anos de experi√™ncia.

# CONTEXT
Voc√™ recebeu um conjunto de an√°lises preliminares (sum√°rios) de um projeto de software.
Abaixo est√° o hist√≥rico da conversa com o usu√°rio, que pode conter instru√ß√µes ou focos espec√≠ficos para a an√°lise.

# HIST√ìRICO DA CONVERSA
${history}

# TASK
Sua tarefa √© sintetizar esses sum√°rios em um √∫nico relat√≥rio final e abrangente.
Com base nas informa√ß√µes dos sum√°rios e no contexto da conversa, preencha o JSON abaixo com pontua√ß√µes, justificativas t√©cnicas e sugest√µes pr√°ticas.
Calcule o "overallScore" como uma m√©dia ponderada das outras pontua√ß√µes.

# OUTPUT FORMAT
Responda APENAS em formato JSON, seguindo estritamente a estrutura abaixo. N√£o inclua nenhuma outra explica√ß√£o fora do JSON.

{
  "projectName": "An√°lise de Projeto",
  "overallScore": 0.0,
  "summary": "Um resumo executivo conciso da sa√∫de geral do projeto, baseado nas an√°lises.",
  "analysis": {
    "codeQuality": { "score": 0, "justification": "...", "suggestions": [] },
    "architectureAndDesign": { "score": 0, "justification": "...", "suggestions": [] },
    "security": { "score": 0, "justification": "...", "suggestions": [] },
    "testing": { "score": 0, "justification": "...", "suggestions": [] },
    "documentation": { "score": 0, "justification": "...", "suggestions": [] }
  }
}

# SUMMARIES FROM PROJECT CHUNKS
${allSummaries}
`;
}

// ---
// 2. ALTERA√á√ÉO: Atualizar o use case principal para usar o sessionId
// ---

// NOVO: Interface para os par√¢metros de entrada
interface AnalyzeProjectInput {
  projectPath: string;
  sessionId?: string;
}

// ALTERADO: A fun√ß√£o agora recebe um objeto de input
export async function analyzeProjectUseCase(input: AnalyzeProjectInput): Promise<any> {
  const { projectPath, sessionId } = input; // <-- Desestrutura√ß√£o dos par√¢metros

  try {
    // NOVO: Busca o hist√≥rico da conversa usando o sessionId
    const conversationHistory = sessionId ? await chatRepository.getAll(sessionId) : [];
    const formattedHistory = formatHistoryForPrompt(conversationHistory);

    const reader = new ProjectReaderService();
    const projectChunks = await reader.getProjectContentInChunks(projectPath);
    const totalChunks = projectChunks.length;

    const chunkAnalyses: string[] = [];

    console.log(`\nü§ñ Iniciando an√°lise preliminar de ${totalChunks} lote(s) do projeto...`);

    for (const [index, chunk] of projectChunks.entries()) {
      console.log(`  - Analisando lote ${index + 1} de ${totalChunks}...`);

      const chunkPrompt = createChunkAnalysisPrompt(
        chunk,
        index + 1,
        totalChunks,
        formattedHistory
      );
      const preliminaryAnalysis = await callGeminiAPI(chunkPrompt);
      chunkAnalyses.push(
        `--- AN√ÅLISE DO LOTE ${index + 1}/${totalChunks} ---\n${preliminaryAnalysis}`
      );
    }

    console.log('\n‚úÖ An√°lises preliminares conclu√≠das.');
    console.log('ü§ñ Sintetizando o relat√≥rio final...');

    const allSummaries = chunkAnalyses.join('\n\n');
    // ALTERADO: Passa o hist√≥rico tamb√©m para o prompt final
    const finalReportPrompt = createFinalReportPrompt(allSummaries, formattedHistory);

    const finalReportRaw = await callGeminiAPI(finalReportPrompt);
    console.log('‚úÖ Relat√≥rio final recebido da IA!');

    try {
      const jsonMatch = finalReportRaw.match(/```json\n([\s\S]*?)\n```/);
      const jsonString = jsonMatch ? jsonMatch[1] : finalReportRaw;

      const jsonResponse = JSON.parse(jsonString ?? '{}');
      return jsonResponse;
    } catch (e) {
      console.error(
        'Erro ao parsear a resposta JSON final da IA. Retornando a resposta em texto bruto.'
      );
      console.error('Detalhes do erro:', e);
      return { rawResponse: finalReportRaw };
    }
  } catch (error) {
    console.error('[analyzeProjectUseCase] Erro:', error);
    throw new Error('Erro ao analisar o projeto.');
  }
}
